//buildscript {
//    repositories {
//        maven { url = 'https://maven.moddingx.org' }
//    }
//
//    dependencies {
//        classpath "org.moddingx:ModGradle:3.0.0"
//    }
//
//}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
//apply plugin: 'org.moddingx.modgradle.coremods'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig('kubejsdebugadapter-common.mixins.json', 'kubejsdebugadapter.mixins.json')
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {

    maven {
        name "ModMaven (JEI, Bookshelf, Game Stages)"
        url "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }

//    maven { url = 'https://maven.moddingx.org' }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modApi("dev.latvian.mods:rhino-forge:${rootProject.rhino_version}")
    modApi "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"
//    coremods 'org.moddingx:CoreModTypes:5.0.2-2'

    modLocalRuntime("mezz.jei:jei-1.18.2:${rootProject.forge_jei_version}")
    implementation(forgeDependencies('org.eclipse.lsp4j:org.eclipse.lsp4j.debug:0.14.0'))
    shadowCommon 'org.eclipse.lsp4j:org.eclipse.lsp4j.debug:0.14.0'

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier 'forge'
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
