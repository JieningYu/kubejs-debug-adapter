export type CoreMods = Record<string, CoreMod>

export type CoreMod = TypedCoreMod<CoreModClassTarget | CoreModClassesTarget, ClassNode> | TypedCoreMod<CoreModFieldTarget, FieldNode> | TypedCoreMod<CoreModMethodTarget, MethodNode>

interface TypedCoreMod<TARGET, TRANSFORM> {
    target: TARGET;
    transformer: (value: TRANSFORM) => TRANSFORM
}

export interface CoreModClassTarget {
    type: 'CLASS';
    name: string;
}

export interface CoreModClassesTarget {
    type: 'CLASS';
    names: Array<string>;
}

export interface CoreModFieldTarget {
    type: 'FIELD';
    class: string;
    fieldName: string;
}

export interface CoreModMethodTarget {
    type: 'METHOD';
    class: string;
    methodName: string;
    methodDesc: string;
}

// This class is not directly accessible by CoreMods but passed
// when transforming classes. So it needs to be manually defined here.
export interface ClassNode extends ClassVisitor {

    version: number;
    access: number;
    name: string;
    signature: string | null;
    superName: string | null;
    interfaces: Array<string>;
    sourceFile: string | null;
    sourceDebug: string | null;
    module: never | null;
    outerClass: string | null;
    outerMethod: string | null;
    outerMethodDesc: string | null;
    visibleAnnotations: Array<Java_org_objectweb_asm_tree_AnnotationNode> | null;
    invisibleAnnotations: Array<Java_org_objectweb_asm_tree_AnnotationNode> | null;
    visibleTypeAnnotations: Array<TypeAnnotationNode> | null;
    invisibleTypeAnnotations: Array<TypeAnnotationNode> | null;
    attrs: Array<Attribute> | null;
    innerClasses: Array<unknown>;
    nestHostClass: string | null;
    nestMembers: Array<string> | null;
    permittedSubclasses: Array<string> | null;
    recordComponents: Array<unknown> | null;
    fields: Array<FieldNode>;
    methods: Array<MethodNode>;

    check(api: number): void;
}

// @ts-ignore
export interface Java_org_objectweb_asm_MethodVisitor{visitParameter(name:string,access:number):void;visitAnnotationDefault():Java_org_objectweb_asm_AnnotationVisitor|null;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAnnotableParameterCount(parameterCount:number,visible:boolean):void;visitParameterAnnotation(parameter:number,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitCode():void;visitFrame(type:number,numLocal:number,local:Array<any>,numStack:number,stack:Array<any>):void;visitInsn(opcode:number):void;visitIntInsn(opcode:number,operand:number):void;visitVarInsn(opcode:number,var_:number):void;visitTypeInsn(opcode:number,type:string):void;visitFieldInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcode:number,owner:string,name:string,descriptor:string,isInterface:boolean):void;visitInvokeDynamicInsn(name:string,descriptor:string,bootstrapMethodHandle:Handle,bootstrapMethodArguments:Array<any>):void;visitJumpInsn(opcode:number,label:Label):void;visitLabel(label:Label):void;visitLdcInsn(value:any):void;visitIincInsn(var_:number,increment:number):void;visitTableSwitchInsn(min:number,max:number,dflt:Label,labels:Array<Label>):void;visitLookupSwitchInsn(dflt:Label,keys:Array<number>,labels:Array<Label>):void;visitMultiANewArrayInsn(descriptor:string,numDimensions:number):void;visitInsnAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTryCatchBlock(start:Label,end:Label,handler:Label,type:string):void;visitTryCatchAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitLocalVariable(name:string,descriptor:string,signature:string,start:Label,end:Label,index:number):void;visitLocalVariableAnnotation(typeRef:number,typePath:TypePath,start:Array<Label>,end:Array<Label>,index:Array<number>,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitLineNumber(line:number,start:Label):void;visitMaxs(maxStack:number,maxLocals:number):void;visitEnd():void;};
// @ts-ignore
export class MethodNode implements Java_org_objectweb_asm_MethodVisitor{constructor();constructor(api:number);constructor(access:number,name:string,descriptor:string,signature:string,exceptions:Array<string>);constructor(api:number,access:number,name:string,descriptor:string,signature:string,exceptions:Array<string>);visitParameter(name:string,access:number):void;visitAnnotationDefault():Java_org_objectweb_asm_AnnotationVisitor;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitAnnotableParameterCount(parameterCount:number,visible:boolean):void;visitParameterAnnotation(parameter:number,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitAttribute(attribute:Attribute):void;visitCode():void;visitFrame(type:number,numLocal:number,local:Array<any>,numStack:number,stack:Array<any>):void;visitInsn(opcode:number):void;visitIntInsn(opcode:number,operand:number):void;visitVarInsn(opcode:number,var_:number):void;visitTypeInsn(opcode:number,type:string):void;visitFieldInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcodeAndSource:number,owner:string,name:string,descriptor:string,isInterface:boolean):void;visitInvokeDynamicInsn(name:string,descriptor:string,bootstrapMethodHandle:Handle,bootstrapMethodArguments:Array<any>):void;visitJumpInsn(opcode:number,label:Label):void;visitLabel(label:Label):void;visitLdcInsn(value:any):void;visitIincInsn(var_:number,increment:number):void;visitTableSwitchInsn(min:number,max:number,dflt:Label,labels:Array<Label>):void;visitLookupSwitchInsn(dflt:Label,keys:Array<number>,labels:Array<Label>):void;visitMultiANewArrayInsn(descriptor:string,numDimensions:number):void;visitInsnAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitTryCatchBlock(start:Label,end:Label,handler:Label,type:string):void;visitTryCatchAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitLocalVariable(name:string,descriptor:string,signature:string,start:Label,end:Label,index:number):void;visitLocalVariableAnnotation(typeRef:number,typePath:TypePath,start:Array<Label>,end:Array<Label>,index:Array<number>,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitLineNumber(line:number,start:Label):void;visitMaxs(maxStack:number,maxLocals:number):void;visitEnd():void;check(api:number):void;accept(classVisitor:Java_org_objectweb_asm_ClassVisitor):void;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;access:number;name:string;desc:string;signature:string|null;exceptions:Array<string>|null;parameters:Array<ParameterNode>;visibleAnnotations:Array<Java_org_objectweb_asm_tree_AnnotationNode>|null;invisibleAnnotations:Array<Java_org_objectweb_asm_tree_AnnotationNode>|null;visibleTypeAnnotations:Array<TypeAnnotationNode>|null;invisibleTypeAnnotations:Array<TypeAnnotationNode>|null;attrs:Array<Attribute>|null;annotationDefault:any|null;visibleAnnotableParameterCount:number;visibleParameterAnnotations:Array<Array<Java_org_objectweb_asm_tree_AnnotationNode>>|null;invisibleAnnotableParameterCount:number;invisibleParameterAnnotations:Array<Array<Java_org_objectweb_asm_tree_AnnotationNode>>|null;instructions:InsnList;tryCatchBlocks:Array<TryCatchBlockNode>;maxStack:number;maxLocals:number;localVariables:Array<LocalVariableNode>|null;visibleLocalVariableAnnotations:Array<LocalVariableAnnotationNode>|null;invisibleLocalVariableAnnotations:Array<LocalVariableAnnotationNode>|null;};
// @ts-ignore
export interface Java_java_lang_Iterable<T>{iterator():never;forEach(action:never):void;spliterator():never;};
// @ts-ignore
export class InsnList implements Java_java_lang_Iterable<AbstractInsnNode>{constructor();size():number;getFirst():AbstractInsnNode|null;getLast():AbstractInsnNode|null;get(index:number):AbstractInsnNode|null;contains(insnNode:AbstractInsnNode):boolean;indexOf(insnNode:AbstractInsnNode):number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;iterator():never;iterator(index:number):never;toArray():Array<AbstractInsnNode>;set(oldInsnNode:AbstractInsnNode,newInsnNode:AbstractInsnNode):void;add(insnNode:AbstractInsnNode):void;add(insnList:InsnList):void;insert(insnNode:AbstractInsnNode):void;insert(insnList:InsnList):void;insert(previousInsn:AbstractInsnNode,insnNode:AbstractInsnNode):void;insert(previousInsn:AbstractInsnNode,insnList:InsnList):void;insertBefore(nextInsn:AbstractInsnNode,insnNode:AbstractInsnNode):void;insertBefore(nextInsn:AbstractInsnNode,insnList:InsnList):void;remove(insnNode:AbstractInsnNode):void;clear():void;resetLabels():void;forEach(action:never):void;spliterator():never;static readonly InsnListIterator=class{hasNext():boolean;next():any|null;remove():void;hasPrevious():boolean;previous():any|null;nextIndex():number;previousIndex():number;add(o:any):void;set(o:any):void;forEachRemaining(action:never):void;};};
// @ts-ignore
export interface Java_org_objectweb_asm_FieldVisitor{visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitEnd():void;};
// @ts-ignore
export class FieldNode implements Java_org_objectweb_asm_FieldVisitor{constructor(access:number,name:string,descriptor:string,signature:string,value:any);constructor(api:number,access:number,name:string,descriptor:string,signature:string,value:any);visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor;visitAttribute(attribute:Attribute):void;visitEnd():void;check(api:number):void;accept(classVisitor:Java_org_objectweb_asm_ClassVisitor):void;access:number;name:string;desc:string;signature:string|null;value:any|null;visibleAnnotations:Array<Java_org_objectweb_asm_tree_AnnotationNode>|null;invisibleAnnotations:Array<Java_org_objectweb_asm_tree_AnnotationNode>|null;visibleTypeAnnotations:Array<TypeAnnotationNode>|null;invisibleTypeAnnotations:Array<TypeAnnotationNode>|null;attrs:Array<Attribute>|null;};
// @ts-ignore
export class LocalVariableNode{constructor(name:string,descriptor:string,signature:string,start:LabelNode,end:LabelNode,index:number);accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;name:string;desc:string;signature:string|null;start:LabelNode;end:LabelNode;index:number;};
// @ts-ignore
export class TryCatchBlockNode{constructor(start:LabelNode,end:LabelNode,handler:LabelNode,type:string);updateIndex(index:number):void;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;start:LabelNode;end:LabelNode;handler:LabelNode;type:string|null;visibleTypeAnnotations:Array<TypeAnnotationNode>|null;invisibleTypeAnnotations:Array<TypeAnnotationNode>|null;};
// @ts-ignore
export class TraceMethodVisitor implements Java_org_objectweb_asm_MethodVisitor{constructor(printer:Printer);constructor(methodVisitor:Java_org_objectweb_asm_MethodVisitor,printer:Printer);visitParameter(name:string,access:number):void;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitAnnotationDefault():Java_org_objectweb_asm_AnnotationVisitor|null;visitAnnotableParameterCount(parameterCount:number,visible:boolean):void;visitParameterAnnotation(parameter:number,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitCode():void;visitFrame(type:number,numLocal:number,local:Array<any>,numStack:number,stack:Array<any>):void;visitInsn(opcode:number):void;visitIntInsn(opcode:number,operand:number):void;visitVarInsn(opcode:number,var_:number):void;visitTypeInsn(opcode:number,type:string):void;visitFieldInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcode:number,owner:string,name:string,descriptor:string,isInterface:boolean):void;visitInvokeDynamicInsn(name:string,descriptor:string,bootstrapMethodHandle:Handle,bootstrapMethodArguments:Array<any>):void;visitJumpInsn(opcode:number,label:Label):void;visitLabel(label:Label):void;visitLdcInsn(value:any):void;visitIincInsn(var_:number,increment:number):void;visitTableSwitchInsn(min:number,max:number,dflt:Label,labels:Array<Label>):void;visitLookupSwitchInsn(dflt:Label,keys:Array<number>,labels:Array<Label>):void;visitMultiANewArrayInsn(descriptor:string,numDimensions:number):void;visitInsnAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTryCatchBlock(start:Label,end:Label,handler:Label,type:string):void;visitTryCatchAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitLocalVariable(name:string,descriptor:string,signature:string,start:Label,end:Label,index:number):void;visitLocalVariableAnnotation(typeRef:number,typePath:TypePath,start:Array<Label>,end:Array<Label>,index:Array<number>,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitLineNumber(line:number,start:Label):void;visitMaxs(maxStack:number,maxLocals:number):void;visitEnd():void;readonly p:Printer;};
// @ts-ignore
export class Printer{visit(o0:number,o1:number,o2:string,o3:string,o4:string,o5:Array<string>):void;visitSource(o0:string,o1:string):void;visitModule(name:string,access:number,version:string):Printer;visitNestHost(nestHost:string):void;visitOuterClass(o0:string,o1:string,o2:string):void;visitClassAnnotation(o0:string,o1:boolean):Printer;visitClassTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Printer;visitClassAttribute(o0:Attribute):void;visitNestMember(nestMember:string):void;visitPermittedSubclass(permittedSubclass:string):void;visitInnerClass(o0:string,o1:string,o2:string,o3:number):void;visitRecordComponent(name:string,descriptor:string,signature:string|null):Printer;visitField(o0:number,o1:string,o2:string,o3:string|null,o4:any|null):Printer;visitMethod(o0:number,o1:string,o2:string,o3:string|null,o4:Array<string>|null):Printer;visitClassEnd():void;visitMainClass(mainClass:string):void;visitPackage(packaze:string):void;visitRequire(module:string,access:number,version:string):void;visitExport(packaze:string,access:number,modules:Array<string>):void;visitOpen(packaze:string,access:number,modules:Array<string>):void;visitUse(service:string):void;visitProvide(service:string,providers:Array<string>):void;visitModuleEnd():void;visit(o0:string,o1:any):void;visitEnum(o0:string,o1:string,o2:string):void;visitAnnotation(o0:string,o1:string):Printer;visitArray(o0:string):Printer;visitAnnotationEnd():void;visitRecordComponentAnnotation(descriptor:string,visible:boolean):Printer;visitRecordComponentTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Printer;visitRecordComponentAttribute(attribute:Attribute):void;visitRecordComponentEnd():void;visitFieldAnnotation(o0:string,o1:boolean):Printer;visitFieldTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Printer;visitFieldAttribute(o0:Attribute):void;visitFieldEnd():void;visitParameter(name:string,access:number):void;visitAnnotationDefault():Printer;visitMethodAnnotation(o0:string,o1:boolean):Printer;visitMethodTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Printer;visitAnnotableParameterCount(parameterCount:number,visible:boolean):Printer;visitParameterAnnotation(o0:number,o1:string,o2:boolean):Printer;visitMethodAttribute(o0:Attribute):void;visitCode():void;visitFrame(o0:number,o1:number,o2:Array<any>,o3:number,o4:Array<any>):void;visitInsn(o0:number):void;visitIntInsn(o0:number,o1:number):void;visitVarInsn(o0:number,o1:number):void;visitTypeInsn(o0:number,o1:string):void;visitFieldInsn(o0:number,o1:string,o2:string,o3:string):void;visitMethodInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcode:number,owner:string,name:string,descriptor:string,isInterface:boolean):void;visitInvokeDynamicInsn(o0:string,o1:string,o2:Handle,o3:Array<any>):void;visitJumpInsn(o0:number,o1:Label):void;visitLabel(o0:Label):void;visitLdcInsn(o0:any):void;visitIincInsn(o0:number,o1:number):void;visitTableSwitchInsn(o0:number,o1:number,o2:Label,o3:Array<Label>):void;visitLookupSwitchInsn(o0:Label,o1:Array<number>,o2:Array<Label>):void;visitMultiANewArrayInsn(o0:string,o1:number):void;visitInsnAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Printer;visitTryCatchBlock(o0:Label,o1:Label,o2:Label,o3:string):void;visitTryCatchAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Printer;visitLocalVariable(o0:string,o1:string,o2:string,o3:Label,o4:Label,o5:number):void;visitLocalVariableAnnotation(typeRef:number,typePath:TypePath,start:Array<Label>,end:Array<Label>|null,index:Array<number>,descriptor:string,visible:boolean):Printer;visitLineNumber(o0:number,o1:Label):void;visitMaxs(o0:number,o1:number):void;visitMethodEnd():void;getText():Array<unknown>;print(printWriter:never):void;static appendString(stringBuilder:never,string:string):void;static readonly OPCODES:Array<string>;static readonly TYPES:Array<string>;static readonly HANDLE_TAG:Array<string>;readonly text:Array<unknown>;};
// @ts-ignore
export class AbstractInsnNode{getOpcode():number;getType():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;accept(o0:Java_org_objectweb_asm_MethodVisitor):void;clone(o0:never):AbstractInsnNode;static readonly INSN:number;static readonly INT_INSN:number;static readonly VAR_INSN:number;static readonly TYPE_INSN:number;static readonly FIELD_INSN:number;static readonly METHOD_INSN:number;static readonly INVOKE_DYNAMIC_INSN:number;static readonly JUMP_INSN:number;static readonly LABEL:number;static readonly LDC_INSN:number;static readonly IINC_INSN:number;static readonly TABLESWITCH_INSN:number;static readonly LOOKUPSWITCH_INSN:number;static readonly MULTIANEWARRAY_INSN:number;static readonly FRAME:number;static readonly LINE:number;visibleTypeAnnotations:Array<TypeAnnotationNode>|null;invisibleTypeAnnotations:Array<TypeAnnotationNode>|null;};
// @ts-ignore
export class FrameNode extends AbstractInsnNode{constructor(type:number,numLocal:number,local:Array<any>,numStack:number,stack:Array<any>);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;type:number;local:Array<unknown>;stack:Array<unknown>;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class IincInsnNode extends AbstractInsnNode{constructor(var_:number,incr:number);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;var:number;incr:number;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export interface Java_org_objectweb_asm_RecordComponentVisitor{getDelegate():Java_org_objectweb_asm_RecordComponentVisitor|null;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitEnd():void;};
// @ts-ignore
export class TraceRecordComponentVisitor implements Java_org_objectweb_asm_RecordComponentVisitor{constructor(printer:Printer);constructor(recordComponentVisitor:Java_org_objectweb_asm_RecordComponentVisitor,printer:Printer);visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitEnd():void;readonly printer:Printer;getDelegate():Java_org_objectweb_asm_RecordComponentVisitor|null;};
// @ts-ignore
export interface Java_org_objectweb_asm_ModuleVisitor{visitMainClass(mainClass:string):void;visitPackage(packaze:string):void;visitRequire(module:string,access:number,version:string):void;visitExport(packaze:string,access:number,modules:Array<string>):void;visitOpen(packaze:string,access:number,modules:Array<string>):void;visitUse(service:string):void;visitProvide(service:string,providers:Array<string>):void;visitEnd():void;};
// @ts-ignore
export class TraceModuleVisitor implements Java_org_objectweb_asm_ModuleVisitor{constructor(printer:Printer);constructor(moduleVisitor:Java_org_objectweb_asm_ModuleVisitor,printer:Printer);visitMainClass(mainClass:string):void;visitPackage(packaze:string):void;visitRequire(module:string,access:number,version:string):void;visitExport(packaze:string,access:number,modules:Array<string>):void;visitOpen(packaze:string,access:number,modules:Array<string>):void;visitUse(use:string):void;visitProvide(service:string,providers:Array<string>):void;visitEnd():void;readonly p:Printer;};
// @ts-ignore
export class MethodInsnNode extends AbstractInsnNode{constructor(opcode:number,owner:string,name:string,descriptor:string);constructor(opcode:number,owner:string,name:string,descriptor:string,isInterface:boolean);setOpcode(opcode:number):void;getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;owner:string;name:string;desc:string;itf:boolean;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class TypePath{getLength():number;getStep(index:number):number;getStepArgument(index:number):number;static fromString(typePath:string|null):TypePath|null;toString():string;static readonly ARRAY_ELEMENT:number;static readonly INNER_TYPE:number;static readonly WILDCARD_BOUND:number;static readonly TYPE_ARGUMENT:number;};
// @ts-ignore
export interface TextifierSupport{textify(o0:never,o1:never):void;};export class TextifierSupport{}
// @ts-ignore
export class MultiANewArrayInsnNode extends AbstractInsnNode{constructor(descriptor:string,numDimensions:number);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;desc:string;dims:number;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class TypeInsnNode extends AbstractInsnNode{constructor(opcode:number,descriptor:string);setOpcode(opcode:number):void;getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;desc:string;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export interface Java_org_objectweb_asm_ClassVisitor{visit(version:number,access:number,name:string,signature:string,superName:string,interfaces:Array<string>):void;visitSource(source:string,debug:string):void;visitModule(name:string,access:number,version:string|null):Java_org_objectweb_asm_ModuleVisitor|null;visitNestHost(nestHost:string):void;visitOuterClass(owner:string,name:string,descriptor:string):void;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitNestMember(nestMember:string):void;visitPermittedSubclass(permittedSubclass:string):void;visitInnerClass(name:string,outerName:string,innerName:string,access:number):void;visitRecordComponent(name:string,descriptor:string,signature:string):Java_org_objectweb_asm_RecordComponentVisitor|null;visitField(access:number,name:string,descriptor:string,signature:string|null,value:any|null):Java_org_objectweb_asm_FieldVisitor|null;visitMethod(access:number,name:string,descriptor:string,signature:string|null,exceptions:Array<string>|null):Java_org_objectweb_asm_MethodVisitor|null;visitEnd():void;};
// @ts-ignore
export class CheckClassAdapter implements Java_org_objectweb_asm_ClassVisitor{constructor(classVisitor:Java_org_objectweb_asm_ClassVisitor);constructor(classVisitor:Java_org_objectweb_asm_ClassVisitor,checkDataFlow:boolean);visit(version:number,access:number,name:string,signature:string,superName:string,interfaces:Array<string>):void;visitSource(file:string,debug:string):void;visitModule(name:string,access:number,version:string):Java_org_objectweb_asm_ModuleVisitor|null;visitNestHost(nestHost:string):void;visitNestMember(nestMember:string):void;visitPermittedSubclass(permittedSubclass:string):void;visitOuterClass(owner:string,name:string,descriptor:string):void;visitInnerClass(name:string,outerName:string,innerName:string,access:number):void;visitRecordComponent(name:string,descriptor:string,signature:string|null):Java_org_objectweb_asm_RecordComponentVisitor|null;visitField(access:number,name:string,descriptor:string,signature:string|null,value:any|null):Java_org_objectweb_asm_FieldVisitor|null;visitMethod(access:number,name:string,descriptor:string,signature:string|null,exceptions:Array<string>):Java_org_objectweb_asm_MethodVisitor|null;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitEnd():void;static checkClassSignature(signature:string):void;static checkMethodSignature(signature:string):void;static checkFieldSignature(signature:string):void;static main(args:Array<string>):void;static verify(classReader:never,printResults:boolean,printWriter:never):void;static verify(classReader:never,loader:never,printResults:boolean,printWriter:never):void;};
// @ts-ignore
export class ASMifier extends Printer{constructor();static main(args:Array<string>):void;visit(version:number,access:number,name:string,signature:string,superName:string,interfaces:Array<string>):void;visitSource(file:string,debug:string):void;visitModule(name:string,flags:number,version:string):Printer;visitNestHost(nestHost:string):void;visitOuterClass(owner:string,name:string,descriptor:string):void;visitClassAnnotation(descriptor:string,visible:boolean):ASMifier;visitClassTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):ASMifier;visitClassAttribute(attribute:Attribute):void;visitNestMember(nestMember:string):void;visitPermittedSubclass(permittedSubclass:string):void;visitInnerClass(name:string,outerName:string,innerName:string,access:number):void;visitRecordComponent(name:string,descriptor:string,signature:string):ASMifier;visitField(access:number,name:string,descriptor:string,signature:string,value:any):ASMifier;visitMethod(access:number,name:string,descriptor:string,signature:string,exceptions:Array<string>):ASMifier;visitClassEnd():void;visitMainClass(mainClass:string):void;visitPackage(packaze:string):void;visitRequire(module:string,access:number,version:string):void;visitExport(packaze:string,access:number,modules:Array<string>):void;visitOpen(packaze:string,access:number,modules:Array<string>):void;visitUse(service:string):void;visitProvide(service:string,providers:Array<string>):void;visitModuleEnd():void;visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):ASMifier;visitArray(name:string):ASMifier;visitAnnotationEnd():void;visitRecordComponentAnnotation(descriptor:string,visible:boolean):ASMifier;visitRecordComponentTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):ASMifier;visitRecordComponentAttribute(attribute:Attribute):void;visitRecordComponentEnd():void;visitFieldAnnotation(descriptor:string,visible:boolean):ASMifier;visitFieldTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):ASMifier;visitFieldAttribute(attribute:Attribute):void;visitFieldEnd():void;visitParameter(parameterName:string,access:number):void;visitAnnotationDefault():ASMifier;visitMethodAnnotation(descriptor:string,visible:boolean):ASMifier;visitMethodTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):ASMifier;visitAnnotableParameterCount(parameterCount:number,visible:boolean):ASMifier;visitParameterAnnotation(parameter:number,descriptor:string,visible:boolean):ASMifier;visitMethodAttribute(attribute:Attribute):void;visitCode():void;visitFrame(type:number,numLocal:number,local:Array<any>,numStack:number,stack:Array<any>):void;visitInsn(opcode:number):void;visitIntInsn(opcode:number,operand:number):void;visitVarInsn(opcode:number,var_:number):void;visitTypeInsn(opcode:number,type:string):void;visitFieldInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcode:number,owner:string,name:string,descriptor:string,isInterface:boolean):void;visitInvokeDynamicInsn(name:string,descriptor:string,bootstrapMethodHandle:Handle,bootstrapMethodArguments:Array<any>):void;visitJumpInsn(opcode:number,label:Label):void;visitLabel(label:Label):void;visitLdcInsn(value:any):void;visitIincInsn(var_:number,increment:number):void;visitTableSwitchInsn(min:number,max:number,dflt:Label,labels:Array<Label>):void;visitLookupSwitchInsn(dflt:Label,keys:Array<number>,labels:Array<Label>):void;visitMultiANewArrayInsn(descriptor:string,numDimensions:number):void;visitInsnAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):ASMifier;visitTryCatchBlock(start:Label,end:Label,handler:Label,type:string):void;visitTryCatchAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):ASMifier;visitLocalVariable(name:string,descriptor:string,signature:string,start:Label,end:Label,index:number):void;visitLocalVariableAnnotation(typeRef:number,typePath:TypePath,start:Array<Label>,end:Array<Label>|null,index:Array<number>,descriptor:string,visible:boolean):Printer;visitLineNumber(line:number,start:Label):void;visitMaxs(maxStack:number,maxLocals:number):void;visitMethodEnd():void;visitAnnotation(descriptor:string,visible:boolean):ASMifier;visitTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):ASMifier;visitTypeAnnotation(method:string,typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):ASMifier;visitAttribute(attribute:Attribute):void;getText():Array<unknown>;print(printWriter:never):void;};
// @ts-ignore
export class TableSwitchInsnNode extends AbstractInsnNode{constructor(min:number,max:number,dflt:LabelNode,labels:Array<LabelNode>);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;min:number;max:number;dflt:LabelNode;labels:Array<LabelNode>;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class IntInsnNode extends AbstractInsnNode{constructor(opcode:number,operand:number);setOpcode(opcode:number):void;getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;operand:number;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class Textifier extends Printer{constructor();static main(args:Array<string>):void;visit(version:number,access:number,name:string,signature:string,superName:string,interfaces:Array<string>):void;visitSource(file:string,debug:string):void;visitModule(name:string,access:number,version:string|null):Printer;visitNestHost(nestHost:string):void;visitOuterClass(owner:string,name:string,descriptor:string):void;visitClassAnnotation(descriptor:string,visible:boolean):Textifier;visitClassTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Printer;visitClassAttribute(attribute:Attribute):void;visitNestMember(nestMember:string):void;visitPermittedSubclass(permittedSubclass:string):void;visitInnerClass(name:string,outerName:string,innerName:string,access:number):void;visitRecordComponent(name:string,descriptor:string,signature:string|null):Printer;visitField(access:number,name:string,descriptor:string,signature:string|null,value:any|null):Textifier;visitMethod(access:number,name:string,descriptor:string,signature:string|null,exceptions:Array<string>):Textifier;visitClassEnd():void;visitMainClass(mainClass:string):void;visitPackage(packaze:string):void;visitRequire(require:string,access:number,version:string):void;visitExport(packaze:string,access:number,modules:Array<string>):void;visitOpen(packaze:string,access:number,modules:Array<string>):void;visitUse(use:string):void;visitProvide(provide:string,providers:Array<string>):void;visitModuleEnd():void;visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):Textifier;visitArray(name:string):Textifier;visitAnnotationEnd():void;visitRecordComponentAnnotation(descriptor:string,visible:boolean):Textifier;visitRecordComponentTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Printer;visitRecordComponentAttribute(attribute:Attribute):void;visitRecordComponentEnd():void;visitFieldAnnotation(descriptor:string,visible:boolean):Textifier;visitFieldTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Printer;visitFieldAttribute(attribute:Attribute):void;visitFieldEnd():void;visitParameter(name:string,access:number):void;visitAnnotationDefault():Textifier;visitMethodAnnotation(descriptor:string,visible:boolean):Textifier;visitMethodTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Printer;visitAnnotableParameterCount(parameterCount:number,visible:boolean):Textifier;visitParameterAnnotation(parameter:number,descriptor:string,visible:boolean):Textifier;visitMethodAttribute(attribute:Attribute):void;visitCode():void;visitFrame(type:number,numLocal:number,local:Array<any>,numStack:number,stack:Array<any>):void;visitInsn(opcode:number):void;visitIntInsn(opcode:number,operand:number):void;visitVarInsn(opcode:number,var_:number):void;visitTypeInsn(opcode:number,type:string):void;visitFieldInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcode:number,owner:string,name:string,descriptor:string,isInterface:boolean):void;visitInvokeDynamicInsn(name:string,descriptor:string,bootstrapMethodHandle:Handle,bootstrapMethodArguments:Array<any>):void;visitJumpInsn(opcode:number,label:Label):void;visitLabel(label:Label):void;visitLdcInsn(value:any):void;visitIincInsn(var_:number,increment:number):void;visitTableSwitchInsn(min:number,max:number,dflt:Label,labels:Array<Label>):void;visitLookupSwitchInsn(dflt:Label,keys:Array<number>,labels:Array<Label>):void;visitMultiANewArrayInsn(descriptor:string,numDimensions:number):void;visitInsnAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Printer;visitTryCatchBlock(start:Label,end:Label,handler:Label,type:string):void;visitTryCatchAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Printer;visitLocalVariable(name:string,descriptor:string,signature:string,start:Label,end:Label,index:number):void;visitLocalVariableAnnotation(typeRef:number,typePath:TypePath,start:Array<Label>,end:Array<Label>,index:Array<number>,descriptor:string,visible:boolean):Printer;visitLineNumber(line:number,start:Label):void;visitMaxs(maxStack:number,maxLocals:number):void;visitMethodEnd():void;visitAnnotation(descriptor:string,visible:boolean):Textifier;visitTypeAnnotation(typeRef:number,typePath:TypePath|null,descriptor:string,visible:boolean):Textifier;visitAttribute(attribute:Attribute):void;static readonly INTERNAL_NAME:number;static readonly FIELD_DESCRIPTOR:number;static readonly FIELD_SIGNATURE:number;static readonly METHOD_DESCRIPTOR:number;static readonly METHOD_SIGNATURE:number;static readonly CLASS_SIGNATURE:number;static readonly HANDLE_DESCRIPTOR:number;getText():Array<unknown>;print(printWriter:never):void;};
// @ts-ignore
export class LabelNode extends AbstractInsnNode{constructor();constructor(label:Label);getType():number;getLabel():Label|null;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;resetLabel():void;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export interface Java_org_objectweb_asm_AnnotationVisitor{visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):Java_org_objectweb_asm_AnnotationVisitor|null;visitArray(name:string):Java_org_objectweb_asm_AnnotationVisitor|null;visitEnd():void;};
// @ts-ignore
export class TraceAnnotationVisitor implements Java_org_objectweb_asm_AnnotationVisitor{constructor(printer:Printer);constructor(annotationVisitor:Java_org_objectweb_asm_AnnotationVisitor,printer:Printer);visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):Java_org_objectweb_asm_AnnotationVisitor|null;visitArray(name:string):Java_org_objectweb_asm_AnnotationVisitor|null;visitEnd():void;};
// @ts-ignore
export class CheckMethodAdapter implements Java_org_objectweb_asm_MethodVisitor{constructor(methodvisitor:Java_org_objectweb_asm_MethodVisitor);constructor(methodVisitor:Java_org_objectweb_asm_MethodVisitor,labelInsnIndices:never);constructor(access:number,name:string,descriptor:string,methodVisitor:Java_org_objectweb_asm_MethodVisitor,labelInsnIndices:never);visitParameter(name:string,access:number):void;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAnnotationDefault():Java_org_objectweb_asm_AnnotationVisitor;visitAnnotableParameterCount(parameterCount:number,visible:boolean):void;visitParameterAnnotation(parameter:number,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitCode():void;visitFrame(type:number,numLocal:number,local:Array<any>,numStack:number,stack:Array<any>):void;visitInsn(opcode:number):void;visitIntInsn(opcode:number,operand:number):void;visitVarInsn(opcode:number,var_:number):void;visitTypeInsn(opcode:number,type:string):void;visitFieldInsn(opcode:number,owner:string,name:string,descriptor:string):void;visitMethodInsn(opcodeAndSource:number,owner:string,name:string,descriptor:string,isInterface:boolean):void;visitInvokeDynamicInsn(name:string,descriptor:string,bootstrapMethodHandle:Handle,bootstrapMethodArguments:Array<any>):void;visitJumpInsn(opcode:number,label:Label):void;visitLabel(label:Label):void;visitLdcInsn(value:any):void;visitIincInsn(var_:number,increment:number):void;visitTableSwitchInsn(min:number,max:number,dflt:Label,labels:Array<Label>):void;visitLookupSwitchInsn(dflt:Label,keys:Array<number>,labels:Array<Label>):void;visitMultiANewArrayInsn(descriptor:string,numDimensions:number):void;visitInsnAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTryCatchBlock(start:Label,end:Label,handler:Label,type:string):void;visitTryCatchAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitLocalVariable(name:string,descriptor:string,signature:string,start:Label,end:Label,index:number):void;visitLocalVariableAnnotation(typeRef:number,typePath:TypePath,start:Array<Label>,end:Array<Label>,index:Array<number>,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitLineNumber(line:number,start:Label):void;visitMaxs(maxStack:number,maxLocals:number):void;visitEnd():void;version:number;static readonly Method=class implements Java_java_lang_Enum<CheckMethodAdapter.Method>{static values():Array<CheckMethodAdapter.Method>;static valueOf(name:string):CheckMethodAdapter.Method;static readonly VISIT_INSN:CheckMethodAdapter.Method;static readonly VISIT_INT_INSN:CheckMethodAdapter.Method;static readonly VISIT_VAR_INSN:CheckMethodAdapter.Method;static readonly VISIT_TYPE_INSN:CheckMethodAdapter.Method;static readonly VISIT_FIELD_INSN:CheckMethodAdapter.Method;static readonly VISIT_METHOD_INSN:CheckMethodAdapter.Method;static readonly VISIT_JUMP_INSN:CheckMethodAdapter.Method;name():string;ordinal():number;toString():string;equals(other:any):boolean;hashCode():number;compareTo(o:E):number;getDeclaringClass():never;describeConstable():never;};};
// @ts-ignore
export interface Java_org_objectweb_asm_signature_SignatureVisitor{visitFormalTypeParameter(name:string):void;visitClassBound():Java_org_objectweb_asm_signature_SignatureVisitor;visitInterfaceBound():Java_org_objectweb_asm_signature_SignatureVisitor;visitSuperclass():Java_org_objectweb_asm_signature_SignatureVisitor;visitInterface():Java_org_objectweb_asm_signature_SignatureVisitor;visitParameterType():Java_org_objectweb_asm_signature_SignatureVisitor;visitReturnType():Java_org_objectweb_asm_signature_SignatureVisitor;visitExceptionType():Java_org_objectweb_asm_signature_SignatureVisitor;visitBaseType(descriptor:number):void;visitTypeVariable(name:string):void;visitArrayType():Java_org_objectweb_asm_signature_SignatureVisitor;visitClassType(name:string):void;visitInnerClassType(name:string):void;visitTypeArgument():void;visitTypeArgument(wildcard:number):Java_org_objectweb_asm_signature_SignatureVisitor;visitEnd():void;};
// @ts-ignore
export class TraceSignatureVisitor implements Java_org_objectweb_asm_signature_SignatureVisitor{constructor(accessFlags:number);visitFormalTypeParameter(name:string):void;visitClassBound():Java_org_objectweb_asm_signature_SignatureVisitor;visitInterfaceBound():Java_org_objectweb_asm_signature_SignatureVisitor;visitSuperclass():Java_org_objectweb_asm_signature_SignatureVisitor;visitInterface():Java_org_objectweb_asm_signature_SignatureVisitor;visitParameterType():Java_org_objectweb_asm_signature_SignatureVisitor;visitReturnType():Java_org_objectweb_asm_signature_SignatureVisitor;visitExceptionType():Java_org_objectweb_asm_signature_SignatureVisitor;visitBaseType(descriptor:number):void;visitTypeVariable(name:string):void;visitArrayType():Java_org_objectweb_asm_signature_SignatureVisitor;visitClassType(name:string):void;visitInnerClassType(name:string):void;visitTypeArgument():void;visitTypeArgument(tag:number):Java_org_objectweb_asm_signature_SignatureVisitor;visitEnd():void;getDeclaration():string;getReturnType():string|null;getExceptions():string|null;};
// @ts-ignore
export class TraceFieldVisitor implements Java_org_objectweb_asm_FieldVisitor{constructor(printer:Printer);constructor(fieldVisitor:Java_org_objectweb_asm_FieldVisitor,printer:Printer);visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitEnd():void;readonly p:Printer;};
// @ts-ignore
export class TypeReference{constructor(typeRef:number);static newTypeReference(sort:number):TypeReference;static newTypeParameterReference(sort:number,paramIndex:number):TypeReference;static newTypeParameterBoundReference(sort:number,paramIndex:number,boundIndex:number):TypeReference;static newSuperTypeReference(itfIndex:number):TypeReference;static newFormalParameterReference(paramIndex:number):TypeReference;static newExceptionReference(exceptionIndex:number):TypeReference;static newTryCatchReference(tryCatchBlockIndex:number):TypeReference;static newTypeArgumentReference(sort:number,argIndex:number):TypeReference;getSort():number;getTypeParameterIndex():number;getTypeParameterBoundIndex():number;getSuperTypeIndex():number;getFormalParameterIndex():number;getExceptionIndex():number;getTryCatchBlockIndex():number;getTypeArgumentIndex():number;getValue():number;static readonly CLASS_TYPE_PARAMETER:number;static readonly METHOD_TYPE_PARAMETER:number;static readonly CLASS_EXTENDS:number;static readonly CLASS_TYPE_PARAMETER_BOUND:number;static readonly METHOD_TYPE_PARAMETER_BOUND:number;static readonly FIELD:number;static readonly METHOD_RETURN:number;static readonly METHOD_RECEIVER:number;static readonly METHOD_FORMAL_PARAMETER:number;static readonly THROWS:number;static readonly LOCAL_VARIABLE:number;static readonly RESOURCE_VARIABLE:number;static readonly EXCEPTION_PARAMETER:number;static readonly INSTANCEOF:number;static readonly NEW:number;static readonly CONSTRUCTOR_REFERENCE:number;static readonly METHOD_REFERENCE:number;static readonly CAST:number;static readonly CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:number;static readonly METHOD_INVOCATION_TYPE_ARGUMENT:number;static readonly CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:number;static readonly METHOD_REFERENCE_TYPE_ARGUMENT:number;};
// @ts-ignore
export class Attribute{isUnknown():boolean;isCodeAttribute():boolean;readonly type:string;static readonly Set=class{};};
// @ts-ignore
export class VarInsnNode extends AbstractInsnNode{constructor(opcode:number,var_:number);setOpcode(opcode:number):void;getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;var:number;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class JumpInsnNode extends AbstractInsnNode{constructor(opcode:number,label:LabelNode);setOpcode(opcode:number):void;getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;label:LabelNode;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export interface Java_java_lang_Comparable<T>{compareTo(o0:T):number;};
// @ts-ignore
export interface Java_java_lang_constant_Constable{describeConstable():never;};
// @ts-ignore
export interface Java_java_io_Serializable{};
// @ts-ignore
export interface Java_java_lang_Enum<E extends (Java_java_lang_Enum<E>)> extends Java_java_lang_constant_Constable,Java_java_lang_Comparable<E>,Java_java_io_Serializable{name():string;ordinal():number;toString():string;equals(other:any):boolean;hashCode():number;compareTo(o:E):number;getDeclaringClass():never;describeConstable():never;};
// @ts-ignore
export class CheckSignatureAdapter$State implements Java_java_lang_Enum<CheckSignatureAdapter.State>{static values():Array<CheckSignatureAdapter.State>;static valueOf(name:string):CheckSignatureAdapter.State;static readonly EMPTY:CheckSignatureAdapter.State;static readonly FORMAL:CheckSignatureAdapter.State;static readonly BOUND:CheckSignatureAdapter.State;static readonly SUPER:CheckSignatureAdapter.State;static readonly PARAM:CheckSignatureAdapter.State;static readonly RETURN:CheckSignatureAdapter.State;static readonly SIMPLE_TYPE:CheckSignatureAdapter.State;static readonly CLASS_TYPE:CheckSignatureAdapter.State;static readonly END:CheckSignatureAdapter.State;name():string;ordinal():number;toString():string;equals(other:any):boolean;hashCode():number;compareTo(o:E):number;getDeclaringClass():never;describeConstable():never;};
// @ts-ignore
export class CheckModuleAdapter$NameSet{};
// @ts-ignore
export class FieldInsnNode extends AbstractInsnNode{constructor(opcode:number,owner:string,name:string,descriptor:string);setOpcode(opcode:number):void;getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;owner:string;name:string;desc:string;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class InvokeDynamicInsnNode extends AbstractInsnNode{constructor(name:string,descriptor:string,bootstrapMethodHandle:Handle,bootstrapMethodArguments:Array<any>);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;name:string;desc:string;bsm:Handle;bsmArgs:Array<any>;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export interface Java_org_objectweb_asm_tree_AnnotationNode extends Java_org_objectweb_asm_AnnotationVisitor{visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):Java_org_objectweb_asm_AnnotationVisitor;visitArray(name:string):Java_org_objectweb_asm_AnnotationVisitor;visitEnd():void;check(api:number):void;accept(annotationVisitor:Java_org_objectweb_asm_AnnotationVisitor):void;desc:string;values:Array<unknown>;};
// @ts-ignore
export class TypeAnnotationNode implements Java_org_objectweb_asm_tree_AnnotationNode{constructor(typeRef:number,typePath:TypePath,descriptor:string);constructor(api:number,typeRef:number,typePath:TypePath,descriptor:string);typeRef:number;typePath:TypePath|null;visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):Java_org_objectweb_asm_AnnotationVisitor;visitArray(name:string):Java_org_objectweb_asm_AnnotationVisitor;visitEnd():void;check(api:number):void;accept(annotationVisitor:Java_org_objectweb_asm_AnnotationVisitor):void;};
// @ts-ignore
export class CheckAnnotationAdapter implements Java_org_objectweb_asm_AnnotationVisitor{constructor(annotationVisitor:Java_org_objectweb_asm_AnnotationVisitor);visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):Java_org_objectweb_asm_AnnotationVisitor|null;visitArray(name:string):Java_org_objectweb_asm_AnnotationVisitor;visitEnd():void;};
// @ts-ignore
export class ParameterNode{constructor(name:string,access:number);accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;name:string;access:number;};
// @ts-ignore
export class TraceClassVisitor implements Java_org_objectweb_asm_ClassVisitor{constructor(printWriter:never);constructor(classVisitor:Java_org_objectweb_asm_ClassVisitor,printWriter:never);constructor(classVisitor:Java_org_objectweb_asm_ClassVisitor,printer:Printer,printWriter:never);visit(version:number,access:number,name:string,signature:string,superName:string,interfaces:Array<string>):void;visitSource(file:string,debug:string):void;visitModule(name:string,flags:number,version:string):Java_org_objectweb_asm_ModuleVisitor|null;visitNestHost(nestHost:string):void;visitOuterClass(owner:string,name:string,descriptor:string):void;visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitNestMember(nestMember:string):void;visitPermittedSubclass(permittedSubclass:string):void;visitInnerClass(name:string,outerName:string,innerName:string,access:number):void;visitRecordComponent(name:string,descriptor:string,signature:string):Java_org_objectweb_asm_RecordComponentVisitor|null;visitField(access:number,name:string,descriptor:string,signature:string,value:any):Java_org_objectweb_asm_FieldVisitor|null;visitMethod(access:number,name:string,descriptor:string,signature:string,exceptions:Array<string>):Java_org_objectweb_asm_MethodVisitor|null;visitEnd():void;readonly p:Printer;};
// @ts-ignore
export class LdcInsnNode extends AbstractInsnNode{constructor(value:any);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;cst:any;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class LocalVariableAnnotationNode extends TypeAnnotationNode{constructor(typeRef:number,typePath:TypePath,start:Array<LabelNode>,end:Array<LabelNode>,index:Array<number>,descriptor:string);constructor(api:number,typeRef:number,typePath:TypePath,start:Array<LabelNode>,end:Array<LabelNode>,index:Array<number>,descriptor:string);accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor,visible:boolean):void;start:Array<LabelNode>;end:Array<LabelNode>;index:Array<unknown>;visit(name:string,value:any):void;visitEnum(name:string,descriptor:string,value:string):void;visitAnnotation(name:string,descriptor:string):Java_org_objectweb_asm_AnnotationVisitor;visitArray(name:string):Java_org_objectweb_asm_AnnotationVisitor;visitEnd():void;check(api:number):void;};
// @ts-ignore
export class Type{static getType(typeDescriptor:string):Type;static getType(clazz:never):Type;static getType(constructor:never):Type;static getType(method:never):Type;getElementType():Type;static getObjectType(internalName:string):Type;static getMethodType(methodDescriptor:string):Type;static getMethodType(returnType:Type,argumentTypes:Array<Type>):Type;getArgumentTypes():Array<Type>;static getArgumentTypes(methodDescriptor:string):Array<Type>;static getArgumentTypes(method:never):Array<Type>;getReturnType():Type;static getReturnType(methodDescriptor:string):Type;static getReturnType(method:never):Type;getClassName():string;getInternalName():string;static getInternalName(clazz:never):string;getDescriptor():string;static getDescriptor(clazz:never):string;static getConstructorDescriptor(constructor:never):string;static getMethodDescriptor(returnType:Type,argumentTypes:Array<Type>):string;static getMethodDescriptor(method:never):string;getSort():number;getDimensions():number;getSize():number;getArgumentsAndReturnSizes():number;static getArgumentsAndReturnSizes(methodDescriptor:string):number;getOpcode(opcode:number):number;equals(object:any):boolean;hashCode():number;toString():string;static readonly VOID:number;static readonly BOOLEAN:number;static readonly CHAR:number;static readonly BYTE:number;static readonly SHORT:number;static readonly INT:number;static readonly FLOAT:number;static readonly LONG:number;static readonly DOUBLE:number;static readonly ARRAY:number;static readonly OBJECT:number;static readonly METHOD:number;static readonly VOID_TYPE:Type;static readonly BOOLEAN_TYPE:Type;static readonly CHAR_TYPE:Type;static readonly BYTE_TYPE:Type;static readonly SHORT_TYPE:Type;static readonly INT_TYPE:Type;static readonly FLOAT_TYPE:Type;static readonly LONG_TYPE:Type;static readonly DOUBLE_TYPE:Type;};
// @ts-ignore
export interface ASMifierSupport{asmify(o0:never,o1:string,o2:never):void;};export class ASMifierSupport{}
// @ts-ignore
export class CheckRecordComponentAdapter implements Java_org_objectweb_asm_RecordComponentVisitor{constructor(recordComponentVisitor:Java_org_objectweb_asm_RecordComponentVisitor);visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitEnd():void;getDelegate():Java_org_objectweb_asm_RecordComponentVisitor|null;};
// @ts-ignore
export class InsnNode extends AbstractInsnNode{constructor(opcode:number);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class ASMAPI{constructor();static getMethodNode():MethodNode;static appendMethodCall(node:MethodNode,methodCall:MethodInsnNode):void;static buildMethodCall(ownerName:string,methodName:string,methodDescriptor:string,type:ASMAPI.MethodType):MethodInsnNode;static mapMethod(name:string):string;static mapField(name:string):string;static getSystemPropertyFlag(propertyName:string):boolean;static findFirstInstruction(method:MethodNode,opCode:number):AbstractInsnNode;static findFirstInstructionAfter(method:MethodNode,opCode:number,startIndex:number):AbstractInsnNode;static findFirstInstructionBefore(method:MethodNode,opCode:number,startIndex:number):AbstractInsnNode;static findFirstMethodCall(method:MethodNode,type:ASMAPI.MethodType,owner:string,name:string,descriptor:string):MethodInsnNode;static findFirstMethodCallAfter(method:MethodNode,type:ASMAPI.MethodType,owner:string,name:string,descriptor:string,startIndex:number):MethodInsnNode;static findFirstMethodCallBefore(method:MethodNode,type:ASMAPI.MethodType,owner:string,name:string,descriptor:string,startIndex:number):MethodInsnNode;static insertInsnList(method:MethodNode,type:ASMAPI.MethodType,owner:string,name:string,desc:string,list:InsnList,mode:ASMAPI.InsertMode):boolean;static listOf(nodes:Array<AbstractInsnNode>):InsnList;static redirectFieldToMethod(classNode:never,fieldName:string,methodName:string|null):void;static loadFile(file:string):boolean;static loadData(file:string):any|null;static log(level:string,message:string,args:Array<any>):void;static classNodeToString(node:never):string;static fieldNodeToString(node:FieldNode):string;static methodNodeToString(node:MethodNode):string;static readonly MethodType=class implements Java_java_lang_Enum<ASMAPI.MethodType>{static values():Array<ASMAPI.MethodType>;static valueOf(name:string):ASMAPI.MethodType;toOpcode():number;static readonly VIRTUAL:ASMAPI.MethodType;static readonly SPECIAL:ASMAPI.MethodType;static readonly STATIC:ASMAPI.MethodType;static readonly INTERFACE:ASMAPI.MethodType;name():string;ordinal():number;toString():string;equals(other:any):boolean;hashCode():number;compareTo(o:E):number;getDeclaringClass():never;describeConstable():never;};static readonly InsertMode=class implements Java_java_lang_Enum<ASMAPI.InsertMode>{static values():Array<ASMAPI.InsertMode>;static valueOf(name:string):ASMAPI.InsertMode;static readonly REMOVE_ORIGINAL:ASMAPI.InsertMode;static readonly INSERT_BEFORE:ASMAPI.InsertMode;static readonly INSERT_AFTER:ASMAPI.InsertMode;name():string;ordinal():number;toString():string;equals(other:any):boolean;hashCode():number;compareTo(o:E):number;getDeclaringClass():never;describeConstable():never;};};
// @ts-ignore
export class CheckFieldAdapter implements Java_org_objectweb_asm_FieldVisitor{constructor(fieldVisitor:Java_org_objectweb_asm_FieldVisitor);visitAnnotation(descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitTypeAnnotation(typeRef:number,typePath:TypePath,descriptor:string,visible:boolean):Java_org_objectweb_asm_AnnotationVisitor|null;visitAttribute(attribute:Attribute):void;visitEnd():void;};
// @ts-ignore
export class LookupSwitchInsnNode extends AbstractInsnNode{constructor(dflt:LabelNode,keys:Array<number>,labels:Array<LabelNode>);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;dflt:LabelNode;keys:Array<unknown>;labels:Array<LabelNode>;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export interface Opcodes{};export class Opcodes{static readonly ASM4:number;static readonly ASM5:number;static readonly ASM6:number;static readonly ASM7:number;static readonly ASM8:number;static readonly ASM9:number;static readonly ASM10_EXPERIMENTAL:number;static readonly SOURCE_DEPRECATED:number;static readonly SOURCE_MASK:number;static readonly V1_1:number;static readonly V1_2:number;static readonly V1_3:number;static readonly V1_4:number;static readonly V1_5:number;static readonly V1_6:number;static readonly V1_7:number;static readonly V1_8:number;static readonly V9:number;static readonly V10:number;static readonly V11:number;static readonly V12:number;static readonly V13:number;static readonly V14:number;static readonly V15:number;static readonly V16:number;static readonly V17:number;static readonly V_PREVIEW:number;static readonly ACC_PUBLIC:number;static readonly ACC_PRIVATE:number;static readonly ACC_PROTECTED:number;static readonly ACC_STATIC:number;static readonly ACC_FINAL:number;static readonly ACC_SUPER:number;static readonly ACC_SYNCHRONIZED:number;static readonly ACC_OPEN:number;static readonly ACC_TRANSITIVE:number;static readonly ACC_VOLATILE:number;static readonly ACC_BRIDGE:number;static readonly ACC_STATIC_PHASE:number;static readonly ACC_VARARGS:number;static readonly ACC_TRANSIENT:number;static readonly ACC_NATIVE:number;static readonly ACC_INTERFACE:number;static readonly ACC_ABSTRACT:number;static readonly ACC_STRICT:number;static readonly ACC_SYNTHETIC:number;static readonly ACC_ANNOTATION:number;static readonly ACC_ENUM:number;static readonly ACC_MANDATED:number;static readonly ACC_MODULE:number;static readonly ACC_RECORD:number;static readonly ACC_DEPRECATED:number;static readonly T_BOOLEAN:number;static readonly T_CHAR:number;static readonly T_FLOAT:number;static readonly T_DOUBLE:number;static readonly T_BYTE:number;static readonly T_SHORT:number;static readonly T_INT:number;static readonly T_LONG:number;static readonly H_GETFIELD:number;static readonly H_GETSTATIC:number;static readonly H_PUTFIELD:number;static readonly H_PUTSTATIC:number;static readonly H_INVOKEVIRTUAL:number;static readonly H_INVOKESTATIC:number;static readonly H_INVOKESPECIAL:number;static readonly H_NEWINVOKESPECIAL:number;static readonly H_INVOKEINTERFACE:number;static readonly F_NEW:number;static readonly F_FULL:number;static readonly F_APPEND:number;static readonly F_CHOP:number;static readonly F_SAME:number;static readonly F_SAME1:number;static readonly TOP:never;static readonly INTEGER:never;static readonly FLOAT:never;static readonly DOUBLE:never;static readonly LONG:never;static readonly NULL:never;static readonly UNINITIALIZED_THIS:never;static readonly NOP:number;static readonly ACONST_NULL:number;static readonly ICONST_M1:number;static readonly ICONST_0:number;static readonly ICONST_1:number;static readonly ICONST_2:number;static readonly ICONST_3:number;static readonly ICONST_4:number;static readonly ICONST_5:number;static readonly LCONST_0:number;static readonly LCONST_1:number;static readonly FCONST_0:number;static readonly FCONST_1:number;static readonly FCONST_2:number;static readonly DCONST_0:number;static readonly DCONST_1:number;static readonly BIPUSH:number;static readonly SIPUSH:number;static readonly LDC:number;static readonly ILOAD:number;static readonly LLOAD:number;static readonly FLOAD:number;static readonly DLOAD:number;static readonly ALOAD:number;static readonly IALOAD:number;static readonly LALOAD:number;static readonly FALOAD:number;static readonly DALOAD:number;static readonly AALOAD:number;static readonly BALOAD:number;static readonly CALOAD:number;static readonly SALOAD:number;static readonly ISTORE:number;static readonly LSTORE:number;static readonly FSTORE:number;static readonly DSTORE:number;static readonly ASTORE:number;static readonly IASTORE:number;static readonly LASTORE:number;static readonly FASTORE:number;static readonly DASTORE:number;static readonly AASTORE:number;static readonly BASTORE:number;static readonly CASTORE:number;static readonly SASTORE:number;static readonly POP:number;static readonly POP2:number;static readonly DUP:number;static readonly DUP_X1:number;static readonly DUP_X2:number;static readonly DUP2:number;static readonly DUP2_X1:number;static readonly DUP2_X2:number;static readonly SWAP:number;static readonly IADD:number;static readonly LADD:number;static readonly FADD:number;static readonly DADD:number;static readonly ISUB:number;static readonly LSUB:number;static readonly FSUB:number;static readonly DSUB:number;static readonly IMUL:number;static readonly LMUL:number;static readonly FMUL:number;static readonly DMUL:number;static readonly IDIV:number;static readonly LDIV:number;static readonly FDIV:number;static readonly DDIV:number;static readonly IREM:number;static readonly LREM:number;static readonly FREM:number;static readonly DREM:number;static readonly INEG:number;static readonly LNEG:number;static readonly FNEG:number;static readonly DNEG:number;static readonly ISHL:number;static readonly LSHL:number;static readonly ISHR:number;static readonly LSHR:number;static readonly IUSHR:number;static readonly LUSHR:number;static readonly IAND:number;static readonly LAND:number;static readonly IOR:number;static readonly LOR:number;static readonly IXOR:number;static readonly LXOR:number;static readonly IINC:number;static readonly I2L:number;static readonly I2F:number;static readonly I2D:number;static readonly L2I:number;static readonly L2F:number;static readonly L2D:number;static readonly F2I:number;static readonly F2L:number;static readonly F2D:number;static readonly D2I:number;static readonly D2L:number;static readonly D2F:number;static readonly I2B:number;static readonly I2C:number;static readonly I2S:number;static readonly LCMP:number;static readonly FCMPL:number;static readonly FCMPG:number;static readonly DCMPL:number;static readonly DCMPG:number;static readonly IFEQ:number;static readonly IFNE:number;static readonly IFLT:number;static readonly IFGE:number;static readonly IFGT:number;static readonly IFLE:number;static readonly IF_ICMPEQ:number;static readonly IF_ICMPNE:number;static readonly IF_ICMPLT:number;static readonly IF_ICMPGE:number;static readonly IF_ICMPGT:number;static readonly IF_ICMPLE:number;static readonly IF_ACMPEQ:number;static readonly IF_ACMPNE:number;static readonly GOTO:number;static readonly JSR:number;static readonly RET:number;static readonly TABLESWITCH:number;static readonly LOOKUPSWITCH:number;static readonly IRETURN:number;static readonly LRETURN:number;static readonly FRETURN:number;static readonly DRETURN:number;static readonly ARETURN:number;static readonly RETURN:number;static readonly GETSTATIC:number;static readonly PUTSTATIC:number;static readonly GETFIELD:number;static readonly PUTFIELD:number;static readonly INVOKEVIRTUAL:number;static readonly INVOKESPECIAL:number;static readonly INVOKESTATIC:number;static readonly INVOKEINTERFACE:number;static readonly INVOKEDYNAMIC:number;static readonly NEW:number;static readonly NEWARRAY:number;static readonly ANEWARRAY:number;static readonly ARRAYLENGTH:number;static readonly ATHROW:number;static readonly CHECKCAST:number;static readonly INSTANCEOF:number;static readonly MONITORENTER:number;static readonly MONITOREXIT:number;static readonly MULTIANEWARRAY:number;static readonly IFNULL:number;static readonly IFNONNULL:number;}
// @ts-ignore
export class LineNumberNode extends AbstractInsnNode{constructor(line:number,start:LabelNode);getType():number;accept(methodVisitor:Java_org_objectweb_asm_MethodVisitor):void;clone(clonedLabels:never):AbstractInsnNode;line:number;start:LabelNode;getOpcode():number;getPrevious():AbstractInsnNode|null;getNext():AbstractInsnNode|null;};
// @ts-ignore
export class CheckSignatureAdapter implements Java_org_objectweb_asm_signature_SignatureVisitor{constructor(type:number,signatureVisitor:Java_org_objectweb_asm_signature_SignatureVisitor);visitFormalTypeParameter(name:string):void;visitClassBound():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitInterfaceBound():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitSuperclass():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitInterface():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitParameterType():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitReturnType():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitExceptionType():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitBaseType(descriptor:number):void;visitTypeVariable(name:string):void;visitArrayType():Java_org_objectweb_asm_signature_SignatureVisitor|null;visitClassType(name:string):void;visitInnerClassType(name:string):void;visitTypeArgument():void;visitTypeArgument(wildcard:number):Java_org_objectweb_asm_signature_SignatureVisitor|null;visitEnd():void;static readonly CLASS_SIGNATURE:number;static readonly METHOD_SIGNATURE:number;static readonly TYPE_SIGNATURE:number;static readonly State=class implements Java_java_lang_Enum<CheckSignatureAdapter.State>{static values():Array<CheckSignatureAdapter.State>;static valueOf(name:string):CheckSignatureAdapter.State;static readonly EMPTY:CheckSignatureAdapter.State;static readonly FORMAL:CheckSignatureAdapter.State;static readonly BOUND:CheckSignatureAdapter.State;static readonly SUPER:CheckSignatureAdapter.State;static readonly PARAM:CheckSignatureAdapter.State;static readonly RETURN:CheckSignatureAdapter.State;static readonly SIMPLE_TYPE:CheckSignatureAdapter.State;static readonly CLASS_TYPE:CheckSignatureAdapter.State;static readonly END:CheckSignatureAdapter.State;name():string;ordinal():number;toString():string;equals(other:any):boolean;hashCode():number;compareTo(o:E):number;getDeclaringClass():never;describeConstable():never;};};
// @ts-ignore
export class CheckModuleAdapter implements Java_org_objectweb_asm_ModuleVisitor{constructor(moduleVisitor:Java_org_objectweb_asm_ModuleVisitor,isOpen:boolean);visitMainClass(mainClass:string):void;visitPackage(packaze:string):void;visitRequire(module:string,access:number,version:string):void;visitExport(packaze:string,access:number,modules:Array<string>):void;visitOpen(packaze:string,access:number,modules:Array<string>):void;visitUse(service:string):void;visitProvide(service:string,providers:Array<string>):void;visitEnd():void;static readonly NameSet=class{};};
// @ts-ignore
export class Label{constructor();getOffset():number;toString():string;info:any;};
// @ts-ignore
export class Handle{constructor(tag:number,owner:string,name:string,descriptor:string);constructor(tag:number,owner:string,name:string,descriptor:string,isInterface:boolean);getTag():number;getOwner():string;getName():string;getDesc():string;isInterface():boolean;equals(object:any):boolean;hashCode():number;toString():string;};
// @ts-ignore
export class CheckMethodAdapter$Method implements Java_java_lang_Enum<CheckMethodAdapter.Method>{static values():Array<CheckMethodAdapter.Method>;static valueOf(name:string):CheckMethodAdapter.Method;static readonly VISIT_INSN:CheckMethodAdapter.Method;static readonly VISIT_INT_INSN:CheckMethodAdapter.Method;static readonly VISIT_VAR_INSN:CheckMethodAdapter.Method;static readonly VISIT_TYPE_INSN:CheckMethodAdapter.Method;static readonly VISIT_FIELD_INSN:CheckMethodAdapter.Method;static readonly VISIT_METHOD_INSN:CheckMethodAdapter.Method;static readonly VISIT_JUMP_INSN:CheckMethodAdapter.Method;name():string;ordinal():number;toString():string;equals(other:any):boolean;hashCode():number;compareTo(o:E):number;getDeclaringClass():never;describeConstable():never;};


